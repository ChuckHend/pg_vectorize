name: PG Vectorize Extension

defaults:
  run:
    shell: bash
    working-directory: ./

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

  release:
    types:
      - created
jobs:
  dependencies:
    name: Install dependencies
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2

      # rust needed to install trunk
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          cache-directories: /home/runner/.pgrx

      - name: Install stoml and pg-trunk
        shell: bash
        run: |
         set -xe
         wget https://github.com/freshautomations/stoml/releases/download/v0.7.1/stoml_linux_amd64 &> /dev/null
         mv stoml_linux_amd64 stoml
         chmod +x stoml
         sudo mv stoml /usr/local/bin/
         cargo install pg-trunk

      - name: Cache binaries
        uses: actions/cache@v2
        with:
          path: |
            /usr/local/bin/stoml
            ~/.cargo/bin/trunk
          key: ${{ runner.os }}-bins-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-bins-

  lint:
    name: Run linters
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust minimal nightly with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "pg-vectorize-extension-lint"
          workspaces: pg-vectorize/
          # Additional directories to cache
          cache-directories: /home/runner/.pgrx
      - uses: ./.github/actions/pgx-init
        with:
          working-directory: ./
      - name: Cargo format
        run: cargo +nightly fmt --all --check
      - name: Clippy
        run: cargo clippy

  test:
    name: Run tests
    needs: dependencies
    runs-on: ubuntu-22.04
    services:
      # Label used to access the service container
      vector-serve:
        image: quay.io/tembo/vector-serve:latest
        ports:
          - 3000:3000
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "pg-vectorize-extension-test"
          workspaces: pg-vectorize
          # Additional directories to cache
          cache-directories: /home/runner/.pgrx
      - uses: ./.github/actions/pgx-init
        with:
          working-directory: ./
      - name: Restore cached binaries
        uses: actions/cache@v2
        with:
          path: |
            /usr/local/bin/stoml
            ~/.cargo/bin/trunk
          key: ${{ runner.os }}-bins-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-bins-
      - name: setup-tests
        run: |
          pgrx15_config=$(/usr/local/bin/stoml ~/.pgrx/config.toml configs.pg15)
          ~/.cargo/bin/trunk install pgvector --pg-config ${pgrx15_config}
          ~/.cargo/bin/trunk install pgmq --pg-config ${pgrx15_config}
          ~/.cargo/bin/trunk install pg_cron --pg-config ${pgrx15_config}
          echo "shared_preload_libraries = 'pg_cron, vectorize'" >> ~/.pgrx/data-15/postgresql.conf
          rm -rf ./target/pgrx-test-data-* || true
      - name: unit-test
        run: |
          cargo pgrx test
      - name: integration-test
        run: |
          pgrx15_config=$(/usr/local/bin/stoml ~/.pgrx/config.toml configs.pg15)
          pg_version=$(/usr/local/bin/stoml Cargo.toml features.default)
          echo "\q" | make run
          cargo test -- --ignored --test-threads=1

  publish:
    if: github.event_name == 'release'
    name: trunk publish
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "pg-vectorize-extension-test"
          workspaces: pg-vectorize
          # Additional directories to cache
          cache-directories: /home/runner/.pgrx
      - name: Install stoml and pg-trunk
        shell: bash
        run: |
         set -xe
         wget https://github.com/freshautomations/stoml/releases/download/v0.7.1/stoml_linux_amd64 &> /dev/null
         mv stoml_linux_amd64 stoml
         chmod +x stoml
         sudo mv stoml /usr/local/bin/
         cargo install pg-trunk
      - name: trunk build
        working-directory: ./
        run: ~/.cargo/bin/trunk build
      - name: trunk publish
        working-directory: ./
        env:
          TRUNK_API_TOKEN: ${{ secrets.TRUNK_AUTH_TOKEN }}
        run: ~/.cargo/bin/trunk publish
  build_and_push:
    name: Build and push images
    needs:
      - publish
    env:
      TARGET_PLATFORMS: linux/amd64,linux/arm64    
    runs-on:
      - self-hosted
      - dind
      - large-8x8
    outputs:
      short_sha: ${{ steps.versions.outputs.SHORT_SHA }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install stoml and pg-trunk
        shell: bash
        run: |
         set -xe
         wget https://github.com/freshautomations/stoml/releases/download/v0.7.1/stoml_linux_amd64 &> /dev/null
         mv stoml_linux_amd64 stoml
         chmod +x stoml
         sudo mv stoml /usr/local/bin/
      - name: Set version strings
        id: versions
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "TAG_VER=$(/usr/local/bin/stoml Cargo.toml package.version)" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io/tembo
          username: ${{ secrets.QUAY_USER_TEMBO }}
          password: ${{ secrets.QUAY_PASSWORD_TEMBO }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          file: ./images/vectorize-pg/Dockerfile
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            quay.io/tembo/vectorize-pg:v${{ steps.versions.outputs.TAG_VER }}
            quay.io/tembo/vectorize-pg:latest
            ghcr.io/tembo-io/vectorize-pg-v${{ steps.versions.outputs.TAG_VER }}
            ghcr.io/tembo-io/vectorize-pg:latest
