name: PG Vectorize Extension

defaults:
  run:
    shell: bash
    working-directory: ./extension

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - docs/**
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - docs/**

  release:
    types:
      - created
jobs:
  lint:
    name: Run linters
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust minimal nightly with clippy and rustfmt
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "pg-vectorize-extension-lint"
          workspaces: pg-vectorize/
          # Additional directories to cache
          cache-directories: /home/runner/.pgrx
      - uses: ./.github/actions/pgx-init
        with:
          working-directory: ./extension
      - name: Cargo format
        run: cargo fmt --all --check
      - name: Clippy
        run: cargo clippy

  test-core:
    runs-on: ubuntu-24.04
    services:
      postgres:
        image: pgvector/pgvector:0.8.0-pg17
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      vector-serve:
        image: ghcr.io/chuckhend/vector-serve:latest
        ports:
          - 3000:3000
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "extension-test"
          workspaces: |
            vectorize
          # Additional directories to cache
          cache-directories: |
            /home/runner/.pgrx
      - name: Install sys dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql postgresql-contrib libopenblas-dev libreadline-dev
      - name: Test Core
        run: |
          cd ../server && cargo test

      - name: Test Core - Integration
        # skip when on external forks
        if: github.repository_owner == 'ChuckHend'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CO_API_KEY: ${{ secrets.CO_API_KEY }}
          PORTKEY_API_KEY: ${{ secrets.PORTKEY_API_KEY }}
          PORTKEY_VIRTUAL_KEY_OPENAI: ${{ secrets.PORTKEY_VIRTUAL_KEY_OPENAI }}
          VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY }}
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
        run: |
          cd ../server && cargo test -- --ignored

  test:
    name: Run tests
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      vector-serve:
        image: ghcr.io/chuckhend/vector-serve:latest
        ports:
          - 3000:3000
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            vectorize
          # Additional directories to cache
          cache-directories: |
            /home/runner/.pgrx
      - name: Install sys dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential libreadline-dev zlib1g-dev flex bison libclang-dev postgresql-client libicu-dev make wget pkg-config libssl-dev git gcc libopenblas-dev
      - uses: ./.github/actions/pgx-init
        with:
          working-directory: ./extension
      - name: setup-tests
        run: |
          make setup
      - name: unit-test
        run: |
          echo "\q" | make run
          make test-unit
      - name: integration-test
        if: github.repository_owner == 'ChuckHend'
        env:
          HF_API_KEY: ${{ secrets.HF_API_KEY }}
          CO_API_KEY: ${{ secrets.CO_API_KEY }}
          PORTKEY_API_KEY: ${{ secrets.PORTKEY_API_KEY }}
          PORTKEY_VIRTUAL_KEY_OPENAI: ${{ secrets.PORTKEY_VIRTUAL_KEY_OPENAI }}
          VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY }}
        run: make test-integration
